Что будет на уроке
 * Повторить теорию о классе Object и приведении типов, ArrayList, обобщениях, итераторе и операторе for each;
 * получить практические навыки в использовании ArrayList и обобщений;
 * научиться составлять программу с использованием коллекций на примере ArrayList

    task1.java
    (разбор дз)
    Дана строка json, нужно распрсить методом StringBuilder
    Посмотрели как делать логирование
    что такое object ?  от него наследуются все другие классы, все методы для object также справедливы и для других классов;
    какие методы имеет? get hash нужно будет потом с другими коллекциями, equals 

    Использовано:
    * StringBuilder
    * Logger
    
    ---------------------------------------------------
    task2.java
    метод equals 
    позволяет сравнивать объекты не по ссылке а по значению
    метод equals в классе object ("==") сравнивает ссылки на объекты в памяти; 
    - s1==s2
    метод equals в класс string сравнивает строки а не ссылки на объект в памяти; 
    - s1.equals(s2)

    ---------------------------------------------------
    task3.java
    (мое решение)
    заполнить список десятью случайными числами отсортировать список методом sort() и вывести его на экран
    Использовано:
    * import java.util.ArrayList;
    * import java.util.Collections; метод sort
    * import java.util.Random;

    ---------------------------------------------------
    task3_2.java
    (решение одногруппников)
    см.задачу task3.java
    Использовано:
    * import java.util.ArrayList;
    * import java.util.Collections; метод sort
    * import java.util.Random;

    ---------------------------------------------------
    task3_3.java
    (решение одногруппников)
    см.задачу task3.java
    Использовано:
    * import java.util.ArrayList;
    * метод sort; (mylist.sort(null);)
    * Math.random;

    ---------------------------------------------------
    task4.java
    (разбор разницы между массивом и коллекцией, итератор, цикл for)
    чем массив отличается от коллекции? 
    в нашем случае - ничем, но коллекции удобнее использовать, так как там много методов
    итераторы это некий бегунок по коллекции;
    в случае ArrayList это можно делать обычной индексацией, но во многих коллекциях никакой индексации нет.
    для того, чтобы пройти по такой коллекции нужен итератор.
    в sort интроспективная сортировка - помесь быстрой и пирамидальной сортировке
    initial capacity - это изначально количество для ArrayList, чтобы этот массив уже не пересоздавать в процессе добавления элементов
    при этом size будет 0 элементов, так как по факту туда ничего не положили, а только зарезервировали память для будующих элементов
    for each для добавления или изменения коллекции нельзя 
    изменять значения можно либо методами set либо индексацией где это возможно





